/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.is;

import static org.hamcrest.MatcherAssert.assertThat;

final class LibraryTest {

    @Test
    void removeShortWordsRemovesNullElements(){
        //setup
        final List<String> words = Collections.singletonList(null);
        //exercise
        final List<String> actual = words
                .stream()
                .filter(Library::removeShortWords)
                .collect(Collectors.toList());
        //assert

        assertThat(actual.isEmpty(), is(true));

        //teardown
    }

    @Test
    //@Disabled
    void removeShortWordReturnFalseForEmptyString(){
        //setup
        final boolean actual=Library.removeShortWords("");
        //exercise

        //assert

        assertThat(actual, is(false));

        //teardown
    }

    @Test
    void shortWordReturnTrueFor(){
        //setup
        final List<String> words = Collections.singletonList("aaaaaa");
        //exercise
        final List<String> actual = words
                .stream()
                .filter(Library::removeShortWords)
                .collect(Collectors.toList());
        //assert

        assertThat(actual.isEmpty(), is(false));

        //teardown
    }

    @Test
    void removeShortWordsRemovesOneKeepsOne(){
        //setup
        final List<String> words = Arrays.asList("cccc","ccccc");
        //exercise
        final List<String> actual = words
                .stream()
                .filter(Library::removeShortWords)
                .collect(Collectors.toList());
        //assert

        assertThat(actual, contains("ccccc"));

        //teardown
    }

    @Test
    void removeShortWordsRemovesAllBs(){
        //setup
        final List<String> words = Collections.singletonList("bbbbb");
        //exercise
        final List<String> actual = words
                .stream()
                .filter(Library::removeShortWords)
                .collect(Collectors.toList());
        //assert

        assertThat(actual.isEmpty(), is(false));

        //teardown
    }
}
