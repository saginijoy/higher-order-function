import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.BooleanSupplier;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {

    final List<String> words = Arrays.asList(
            "the",
            "shortest",
            "shorter",
            "Fred",
            "longer",
            "longest"
    );

    final List<String> longWords = words
            .stream()
            .filter(Library::removeShortWords)
            .collect(Collectors.toList());

    final List<String> shortWords = words
            .stream()
            .filter(Library::removeShortWords)
            .collect(Collectors.toList());

    final List<String> shortWordsofLength3OrLess = words
            .stream()
            .filter(shorterThanThree)
            .collect(Collectors.toList());

    static Predicate<String> wordsShorterThan(final int minLength){
        return testString->Optional.ofNullable(testString).orElse("")
                .length()<minLength;
    }

     static Predicate<String> shorterThanThree = wordsShorterThan(3);




    public static boolean removeShortWords(String testString) {

        return Optional
                .ofNullable(testString)
                .orElse("")
                .length() > 4;
    }
    //Dec 4 --join
    public static void main(String args[]) {
        // System.out.println(sum(1,2,3,4));
        System.out.println("multiply : " + multiply(4,6));

    }
    //join method implementation
    static String join(String delimiter,  String...stringsToJoin) {

        if(stringsToJoin == null )
        {
            return "";
        }
        return Arrays.stream(stringsToJoin)

                .reduce((identity,accumulator)->{
                    if(delimiter==null ||delimiter.length()==0){
                        return identity+" "+accumulator;
                    }else {return identity+delimiter+accumulator;}
                })
                .orElse("");

    }

    private static long multiply(final int startInclusive, final int endInclusive) {

        return IntStream.rangeClosed(startInclusive, endInclusive)
                .reduce((accumulator , currentNumber) -> {
                    System.out.println(accumulator);
                    System.out.println(currentNumber);
                    return accumulator * currentNumber;

                })
                .orElse(0);
    }

    private static long sum(final int...numbersToSum) {
        return Arrays.stream(numbersToSum)
                .reduce((left, right) -> left + right)
                .orElse(0);



    }
    static List<String> reverseString(final List<String> stringToReverse) {

        if (stringToReverse == null) {
            return Collections.emptyList();

        }
        return stringToReverse
                .stream()
                .filter(Objects::nonNull)
                .map(toReverseString)
                .collect(Collectors.toList());
    }

    private static Function<String, String> toReverseString= stringReversed -> new StringBuilder(stringReversed).reverse().toString();


    public static Map<String, Integer> wordCounts(String sentence) {


        if(sentence == null  )
        {
            return Collections.emptyMap();
        }
        String[] words=sentence.split(" ");
        Map<String, Integer> result = new HashMap<String, Integer>();

        Arrays.stream(words).forEach(word1-> {
            // result.containsKey(word1) ? result.replace(word1,result.get(word1)+1) : result.put(word1,1);
            if (result.containsKey(word1)){
                result.replace(word1,result.get(word1)+1);
            }
            else {
                result.put(word1,1);
            }
        });

        return result;




    }
}
